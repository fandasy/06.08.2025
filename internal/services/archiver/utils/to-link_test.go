package utils

import (
	"github.com/stretchr/testify/require"
	"io"
	"net/http"
	"net/http/httptest"
	"path/filepath"
	"strings"
	"testing"
)

func TestToLink_ValidRequests(t *testing.T) {
	serverPDF := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/pdf")
		w.WriteHeader(http.StatusOK)
		io.WriteString(w, "%PDF-1.4 fake pdf content")
	}))
	defer serverPDF.Close()

	serverRedirectTarget := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "image/jpeg")
		w.WriteHeader(http.StatusOK)
		io.WriteString(w, "fake jpeg content")
	}))
	defer serverRedirectTarget.Close()

	serverRedirect := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Location", serverRedirectTarget.URL+"/image.jpg")
		w.WriteHeader(http.StatusFound) // 302
	}))
	defer serverRedirect.Close()

	serverNoName := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/pdf")
		w.WriteHeader(http.StatusOK)
		io.WriteString(w, "%PDF-1.4 content no name")
	}))
	defer serverNoName.Close()

	getter := NewArchiveObjectGetter(http.DefaultClient)
	validTypes := []string{"application/pdf", "image/jpeg"}

	t.Run("simple pdf download", func(t *testing.T) {
		obj, err := getter.ToLink(serverPDF.URL+"/test.pdf", validTypes)
		require.NoError(t, err)
		require.Equal(t, ".pdf", filepath.Ext(obj.Name))
		require.Contains(t, string(obj.Content), "fake pdf content")
	})

	t.Run("redirect to jpeg", func(t *testing.T) {
		obj, err := getter.ToLink(serverRedirect.URL+"/redir", validTypes)
		require.NoError(t, err)
		require.Equal(t, ".jpg", filepath.Ext(obj.Name))
		require.Contains(t, string(obj.Content), "jpeg content")
	})

	t.Run("no filename in URL", func(t *testing.T) {
		obj, err := getter.ToLink(serverNoName.URL+"/.", validTypes)
		require.NoError(t, err)
		require.True(t, strings.HasPrefix(obj.Name, "file_"), "expected autogenerated filename")
		require.Contains(t, string(obj.Content), "content no name")
	})
}
